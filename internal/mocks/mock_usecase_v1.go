// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/v1Usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/sakshi29/getir-app/internal/model"
)

// MockUseCaseV1 is a mock of UseCaseV1 interface.
type MockUseCaseV1 struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseV1MockRecorder
}

// MockUseCaseV1MockRecorder is the mock recorder for MockUseCaseV1.
type MockUseCaseV1MockRecorder struct {
	mock *MockUseCaseV1
}

// NewMockUseCaseV1 creates a new mock instance.
func NewMockUseCaseV1(ctrl *gomock.Controller) *MockUseCaseV1 {
	mock := &MockUseCaseV1{ctrl: ctrl}
	mock.recorder = &MockUseCaseV1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseV1) EXPECT() *MockUseCaseV1MockRecorder {
	return m.recorder
}

// AddInMemoryRecord mocks base method.
func (m *MockUseCaseV1) AddInMemoryRecord(ctx context.Context, record model.InMemoryRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInMemoryRecord", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInMemoryRecord indicates an expected call of AddInMemoryRecord.
func (mr *MockUseCaseV1MockRecorder) AddInMemoryRecord(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInMemoryRecord", reflect.TypeOf((*MockUseCaseV1)(nil).AddInMemoryRecord), ctx, record)
}

// FetchDocuments mocks base method.
func (m *MockUseCaseV1) FetchDocuments(ctx context.Context, record model.DocumentFilters) ([]model.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDocuments", ctx, record)
	ret0, _ := ret[0].([]model.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDocuments indicates an expected call of FetchDocuments.
func (mr *MockUseCaseV1MockRecorder) FetchDocuments(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDocuments", reflect.TypeOf((*MockUseCaseV1)(nil).FetchDocuments), ctx, record)
}

// GetInMemoryRecord mocks base method.
func (m *MockUseCaseV1) GetInMemoryRecord(ctx context.Context, key string) (model.InMemoryRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInMemoryRecord", ctx, key)
	ret0, _ := ret[0].(model.InMemoryRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInMemoryRecord indicates an expected call of GetInMemoryRecord.
func (mr *MockUseCaseV1MockRecorder) GetInMemoryRecord(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInMemoryRecord", reflect.TypeOf((*MockUseCaseV1)(nil).GetInMemoryRecord), ctx, key)
}
